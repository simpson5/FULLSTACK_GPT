---
description: 
globs: 
alwaysApply: true
---
---
description: LangChain 강의 기반 학습 및 코드 주석 작성 규칙
globs: ["*.py", "docs/langchain/**/*.md"]
alwaysApply: true
---

# 🎓 LangChain 학습용 작업 규칙

## 📚 1. 강의 스크립트 요약 규칙

- 강의 스크립트가 주어지면 다음 기준에 따라 요약:
  - 핵심 개념 (예: Agent, Tool, Chain 등)
  - 주요 역할과 데이터 흐름
  - 사용되는 구성 요소
- 요약은 마크다운 형식으로 작성
  - 제목은 `###`(h3)까지만 사용하고, `#`, `##` 제목은 사용하지 않음
  - 시각적 일관성과 자동 정리를 위함
- 파일 위치: `langchain_docs/[섹션번호] [주제].md`
  - 예: `langchain_docs/1.3 LLMChain 사용법.md`
- 포함할 내용:
  - 개념 정의
  - 사용 목적
  - 흐름 요약
  - 실습 예제 또는 주요 코드 설명
- 객체나 구성요소 정의 시 반드시 공식 문서를 참고하여 정확히 기술
  - OpenAI: https://platform.openai.com/docs/overview?lang=python  
  - LangChain: https://python.langchain.com/docs/introduction/
  - 참조 시에는 URL과 해당 섹션 제목을 주석이나 문서에 명시
    - 예: `# 참조: https://python.langchain.com/docs/modules/chains/llm_chain (LLMChain 개요)`

---

## 🛠️ 2. 코드 반영 규칙

- 요약된 개념을 기반으로 LangChain 관련 코드 구현
- 구현 시 포함할 사항:
  - 구성요소의 역할과 구조 반영 (예: LLMChain, PromptTemplate, Agent 등)
  - 흐름에 따라 함수 또는 모듈 단위로 구성
  - 실제 학습 목적에 맞게 간결하고 명확하게 작성

---

## 🧾 3. 주석 작성 규칙

- 강의 요약에서 나온 주요 개념은 반드시 코드 주석으로 삽입
- 주석 위치:
  - 클래스/함수 정의 상단: 해당 구조의 목적 설명
  - 주요 로직 내부: 동작 방식 설명
  - 체인 구성: 각 구성요소의 역할 명확히 기술
- 공식 문서에서 정의한 기능이라면 해당 정의를 요약하여 주석에 포함
  - 예시:

```python
# 사용자의 입력을 기반으로 텍스트 요약을 수행하는 LLMChain 구성
# 1. PromptTemplate으로 입력 포맷 지정
# 2. OpenAI LLM 호출
# 3. 결과 반환 → 단순 텍스트 요약 형식
# 참조: https://python.langchain.com/docs/modules/chains/llm_chain (LLMChain 개요)
